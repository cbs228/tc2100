""" Temperature observation message """

import enum
import math
from struct import Struct
from collections import namedtuple
from datetime import datetime
from datetime import timezone
from typing import Tuple


@enum.unique
class TemperatureUnit(enum.IntEnum):
    """ A unit of temperature """

    C = 1
    """ Degrees Celsius """

    F = 2
    """ Fahrenheit """

    K = 3
    """ Kelvin """

    def __str__(self):
        return self.name


@enum.unique
class ThermocoupleType(enum.IntEnum):
    """ A type of thermocouple """

    K = 1
    """ K Type """

    J = 2
    """ J Type """

    T = 3
    """ T Type """

    E = 4
    """ E Type """

    R = 5
    """ R Type """

    S = 6
    """ S Type """

    N = 7
    """ N Type """

    def __str__(self):
        return self.name


class MeterTime(namedtuple('MeterTime',
                           ('hours', 'minutes', 'seconds'))):
    """ Elapsed time indication from the thermometer

    The TC2100 represents time as ``hours : minutes : seconds`` from
    boot-up. The maximum representable time is ``255:59:59``. `MeterTime`
    objects are immutable.
    """
    _format = Struct("!3B")
    __slots__ = ()

    def __str__(self):
        return "%03d:%02d:%02d" % self

    def to_bytes(self) -> bytes:
        """ Convert to wireline representation

        :return: Packed byte representation of this MeterTime
        """
        return self._format.pack(self.hours, self.minutes, self.seconds)

    @classmethod
    def from_bytes(cls, octets: bytes) -> 'MeterTime':
        """ Convert from wireline representation

        :param octets: Packed byte representation of this message
        :return: A decoded time. An exception is thrown if the decoding
                 fails.
        """
        return MeterTime(*cls._format.unpack(octets))

    @classmethod
    def size(cls) -> int:
        """ Get packed size of this message

        :return: Size of the packed bytes generated by
                 :py:meth:`MeterTime.to_bytes`
        """
        return cls._format.size


class Observation(namedtuple('Observation',
                             ('system_time',
                              'meter_time',
                              'thermocouple_type',
                              'unit',
                              'temperature_ch1',
                              'temperature_ch2'))):
    """ Temperature observation message from the thermometer
    """

    __slots__ = ()
    _num_channels = 2
    _flag_valid = 0x08
    _flag_invalid = 0x40
    _invalid_placeholder = -32768
    _mask_lowbyte_only = 0x0F
    _units_highbyte = 0x80
    _tzero = MeterTime(0, 0, 0)
    _format = Struct(
        "!"
        "2h"    # measurements, in tens of display units
        "B"     # thermocouple type (enumerated)
        "B"     # display unit (enumerated)
        "2B"    # channel validity / status flags
    )

    @property
    def temperatures(self) -> Tuple[float, float]:
        """ Obtain all temperature measurements

        :return: Temperature measurements from each channel
        """
        return self.temperature_ch1, self.temperature_ch2

    def to_bytes(self) -> bytes:
        """ Convert to wireline representation

        The conversion will be lossy if, for example, the channel temperatures
        are not evenly divisible by 0.1.

        :return: Packed byte representation of this Observation
        """
        out_fields = list()
        out_fields.extend([self._encode_temperature_value(v)
                           for v in self.temperatures])
        if isinstance(self.thermocouple_type, str):
            thermtype = ThermocoupleType[self.thermocouple_type]
        else:
            thermtype = self.thermocouple_type
        out_fields.append(int(thermtype))

        if isinstance(self.unit, str):
            unit = TemperatureUnit[self.unit]
        else:
            unit = self.unit
        out_fields.append(int(unit) | 0x80)

        out_fields.extend([self._encode_temperature_flag(v)
                           for v in self.temperatures])

        meter_time = self.meter_time or self._tzero
        return self._format.pack(*out_fields) + meter_time.to_bytes()

    @classmethod
    def from_bytes(cls, octets: bytes) -> 'Observation':
        """ Convert from wireline representation

        :param octets: Packed byte representation of this message
        :return: A decoded message. An exception is thrown if the decoding
                 fails.
        """
        meter_time = MeterTime.from_bytes(octets[-3:])
        decode = cls._format.unpack(octets[0:-3])
        therm_type = ThermocoupleType(decode[2] & cls._mask_lowbyte_only)
        display_unit = TemperatureUnit(decode[3] & cls._mask_lowbyte_only)
        temperatures = [cls._decode_temperature(decode[i], decode[i + 4])
                        for i in range(0, cls._num_channels)]
        return Observation(datetime.now(timezone.utc),
                           meter_time,
                           therm_type,
                           display_unit,
                           temperatures[0],
                           temperatures[1])

    @classmethod
    def size(cls) -> int:
        """ Get packed size of this message

        :return Size of the packed byte representation of an Observation,
                as generated by :py:meth:`Observation.to_bytes`
        """
        return cls._format.size + MeterTime.size()

    @classmethod
    def _decode_temperature(cls, value, valid_flag) -> float:
        if valid_flag & cls._flag_valid:
            return float(value) / 10.0
        return math.nan

    @classmethod
    def _encode_temperature_value(cls, temperature) -> int:
        if not math.isfinite(temperature):
            return cls._invalid_placeholder
        return int(temperature * 10)

    @classmethod
    def _encode_temperature_flag(cls, temperature) -> int:
        if not math.isfinite(temperature):
            return cls._flag_invalid
        return cls._flag_valid
